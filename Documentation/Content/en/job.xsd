<?xml version="1.0" encoding="Windows-1252"?>
<xs:schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="unqualified">
	<xsd:element name="TransferJob">
		<xsd:annotation>
			<xsd:documentation> Root element of a TransferJob </xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="settings" maxOccurs="1" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation> Global settings for this TransferJob like mail settings </xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="mailSettings" maxOccurs="1" minOccurs="0">
								<xsd:annotation>
									<xsd:documentation>Settings for mailing on error</xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="sendTo" minOccurs="1" maxOccurs="unbounded" type="xs:string">
											<xsd:annotation>
												<xsd:documentation>Recipient for mail sending</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										<xsd:element name="message" minOccurs="0" maxOccurs="1" type="xs:string">
											<xsd:annotation>
												<xsd:documentation>Message used when sending mail (CDATA) - uses a placeholder &lt;message&gt; for the message from the application itself </xsd:documentation>
											</xsd:annotation>
										</xsd:element>
									</xsd:sequence>
									<xsd:attribute name="sendMailOnErrorLevel" use="required" >
										<xsd:annotation>
											<xsd:documentation> Specifies whether a mail should be sent in the event of an error during processing, default false </xsd:documentation>
										</xsd:annotation>
										<xsd:simpleType>
											<xsd:restriction base="xs:string">
													<xsd:enumeration value="Critical"/>
													<xsd:enumeration value="Error"/>
													<xsd:enumeration value="Warning"/>
													<xsd:enumeration value="Information"/>
													<xsd:enumeration value="Verbose"/>
													<xsd:enumeration value="Transfer"/>
											</xsd:restriction>
										</xsd:simpleType>
										
									</xsd:attribute>
									<xsd:attribute name="smtpServer" use="required" type="xs:string">
										<xsd:annotation>
											<xsd:documentation> The SMTP server to use </xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="sendFrom" use="required" type="xs:string">
										<xsd:annotation>
											<xsd:documentation> The sender address to use </xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="subject" use="optional" type="xs:string">
										<xsd:annotation>
											<xsd:documentation> The subject of the error message </xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="writeLogToFile" use="optional" type="xs:string">
							<xsd:annotation>
								<xsd:documentation> Specifies the file name for the log to be used including subpaths - works with placeholders. 
								for date values that must be written in [] e.g. [dd.MM.yyyy]</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				
				<xsd:element maxOccurs="unbounded" name="transferBlock">
					<xsd:annotation>
						<xsd:documentation>
							A transfer block is a logical unit for data transfer. Each transfer block defines a target and a source connection as well 
							as general information on processing. Transfer blocks also control the degree of parallelization of the overall job. 
							Each block can be executed in a separate thread, which can greatly increase the processing speed if there are several blocks. 
							However, each block also establishes its own data source connections. 
							A block also forms the area of a transaction, whereby transactions with explicit individual calls of sub-jobs can also only apply to these. 
							If an error occurs during the processing of the block, the transaction is rolled back.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="preCondition" maxOccurs="unbounded" minOccurs="0" type="conditionType">
								<xsd:annotation>
									<xsd:documentation>
										Defines a condition that is to be checked before processing in the source data source. 
										The condition is only checked if the transfer block is processed as a whole and not explicitly an individual job. 
										The condition is also only checked at the start of the block and not individually for each job. 
										If it is not fulfilled, it can be checked repeatedly at intervals until it is valid. If the condition is still 
										not fulfilled after a defined number of attempts, processing of the block is aborted.
									</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
							<xsd:element maxOccurs="unbounded" name="TransferTableJob">
								<xsd:annotation>
									<xsd:documentation>
										A transfer job of a transfer block that is responsible for exactly one table (1 target) transfer from the source data source to the target data source. 
										Defines how the data in the source data source is determined, how columns must be adjusted and what the target table is called. 
										A TransferTableJob can also form the context of a transaction if it is explicitly triggered in the code or startet bei -j parameter by the command line tool.
									</xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element minOccurs="0" maxOccurs="1" name="syncOptions" type="syncOptions" >
											<xsd:annotation>
												<xsd:documentation>
													Sync options - only useful if attribute sync = true. Specifies which CRUD operators are allowed
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										<xsd:element minOccurs="0" maxOccurs="1" name="syncByLastModOptions" type="syncByLastModOptions" >
											<xsd:annotation>
												<xsd:documentation>
													SyncByLastMod options - Only useful if attribute syncByLastMod = true.
													Specifies which field and which sync mode should be used for date synchronization
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>

										<xsd:element minOccurs="0" maxOccurs="unbounded" name="variable" type="variable" >
											<xsd:annotation>
												<xsd:documentation>
													Variables can be declared/initialized and recalculated in various ways here. 
													The variables are referenced with ${{VarName}}. 
													Execution of the initialization in the specified order.
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										
										<xsd:element minOccurs="0" maxOccurs="1" name="customSourceSelect" type="xsd:string" >
											<xsd:annotation>
												<xsd:documentation>
													Here you can define your own SELECT statement on the data source with which the data is queried. 
													This is an alternative to specifying the source table in the sourceTable attribute. 
													If this value is specified, the sourceTable attribute is ignored!
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										<xsd:element minOccurs="0" maxOccurs="unbounded" name="preCondition" type="conditionType" >
											<xsd:annotation>
												<xsd:documentation>
													Defines a condition that is to be checked in the source data source before processing.
													The condition is always checked, i.e. when the job is explicitly processed or when the complete transfer block is processed.
													If it is not fulfilled, it can be checked repeatedly at intervals until it is valid.
													If the condition is still not fulfilled after a defined number of attempts, processing of the block is aborted.
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										<xsd:element minOccurs="0" maxOccurs="unbounded" name="preStatement" type="xsd:string" >
											<xsd:annotation>
												<xsd:documentation>
													Definition of any number of SQL statements to be executed on the target data source before processing the transfer part of the job
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										<xsd:element minOccurs="0" maxOccurs="1" name="customKeys">
											<xsd:annotation>
												<xsd:documentation>
													Defines keys for a sync - If the attribute Sync = true, this can be mandatory if no ColumnMap is used (e.g. identicalColumn attribute).
												</xsd:documentation>
											</xsd:annotation>
											<xsd:complexType>
												<xsd:sequence>
													<xsd:element minOccurs="1" maxOccurs="unbounded" name="TransferTableColumn" type="ColMapType">
														<xsd:annotation>
															<xsd:documentation>
																The key columns for the sync
															</xsd:documentation>
														</xsd:annotation>
													</xsd:element>
												</xsd:sequence>
											</xsd:complexType>
										</xsd:element>
										<xsd:element minOccurs="0" maxOccurs="1" name="columnMap">
											<xsd:annotation>
												<xsd:documentation>
													Defines a column mapping between the source data source table and the target data source table. 
													If the job attribute identicalColumns is true, the mapping is ignored. 
													If the sync = true attribute is set, at least 1 column must be marked as isKey = true.
												</xsd:documentation>
											</xsd:annotation>
											<xsd:complexType>
												<xsd:sequence>
													<xsd:element minOccurs="1" maxOccurs="unbounded" name="TransferTableColumn" type="ColMapType">
														<xsd:annotation>
															<xsd:documentation>
																A mapping for a target column
															</xsd:documentation>
														</xsd:annotation>			
													</xsd:element>
												</xsd:sequence>
											</xsd:complexType>
										</xsd:element>
										<xsd:element minOccurs="0" maxOccurs="unbounded" name="postStatement" type="xsd:string" >
											<xsd:annotation>
												<xsd:documentation>
													Definition of any number of SQL statements to be executed on the target data source after the transfer job,
													but before a a possible merge.
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
										<xsd:element minOccurs="0" maxOccurs="1" name="mergeOptions">
											<xsd:annotation>
												<xsd:documentation>
													Definition for a possible downstream merge into another table - within the target data source. 
													Implementation for merge has to be present in the data transfer program.
												</xsd:documentation>
											</xsd:annotation>
											<xsd:complexType>
												<xsd:sequence>
													<xsd:element name="mergeKey" minOccurs="0" maxOccurs="unbounded" type="ColMapType">
														<xsd:annotation>
															<xsd:documentation>
																Definition of any number of merge columns by means of which the data equality in the transferred data set and 
																the defined merge table is determined
															</xsd:documentation>
														</xsd:annotation>
													</xsd:element>
													<xsd:element minOccurs="0" maxOccurs="1" name="columnMap">
														<xsd:annotation>
															<xsd:documentation>
																A column mapping for data transfer during the merge. Is ignored if the autoMergeColumns attribute is true.
															</xsd:documentation>
														</xsd:annotation>
														<xsd:complexType>
															<xsd:sequence>
																<xsd:element minOccurs="1" maxOccurs="unbounded" name="TransferTableColumn" type="ColMapType">
																	<xsd:annotation>
																		<xsd:documentation> Mapping for a target column </xsd:documentation>
																	</xsd:annotation>			
																</xsd:element>
															</xsd:sequence>
														</xsd:complexType>
													</xsd:element>
												</xsd:sequence>
												<xsd:attribute name="merge" type="xsd:boolean" use="required" >
													<xsd:annotation>
														<xsd:documentation> Indicates whether a merge should be used. default false </xsd:documentation>
													</xsd:annotation>
												</xsd:attribute>
												<xsd:attribute name="autoMergeColumns" type="xsd:boolean" use="optional" >
													<xsd:annotation>
														<xsd:documentation>
															Specifies whether all columns should simply be transferred to the target table with identical names. default false
														</xsd:documentation>
													</xsd:annotation>
												</xsd:attribute>
												<xsd:attribute name="targetTable" type="xsd:string" use="required" >
													<xsd:annotation>
														<xsd:documentation>
															The name of the target for the merge in the target data source. Format depends on the data source.
															Could be a tablename, a filename for non-SQL or a table range in excel.
															Depending on the data source type, the syntax of the table name must be adapted so that it can follow a FROM in the SQL
														</xsd:documentation>
													</xsd:annotation>
												</xsd:attribute>
											</xsd:complexType>
										</xsd:element>
									</xsd:sequence>
									<xsd:attribute name="sourceTable" type="xsd:string" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												The name of the table in the source data source to be transferred by the job.
												Could be a tablename, a filename for non-SQL or a table range in excel.
												Depending on the data source type, the syntax of the table name must be adapted so that it can follow a FROM in the SQL
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="sourceWhere" type="xsd:string" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												A where part for the source query (without the WHERE keyword) in the syntax of the source provider
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="targetTable" type="xsd:string" use="required" >
										<xsd:annotation>
											<xsd:documentation>
												The name of the target for the merge in the target data source. Format depends on the data source.
												Could be a tablename, a filename for non-SQL or a table range in excel.
												Depending on the data target type, the syntax of the table name must be adapted so that it can follow a FROM in the SQL
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="deleteBefore" type="xsd:boolean" use="optional">
										<xsd:annotation>
											<xsd:documentation> Specifies whether the data of the target table in the target data source should be deleted before filling. Default false</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="deleteWhere" type="xsd:string" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												A where-part for the delete query (without keyword WHERE) in the syntax of the target provider. 
												Only makes sense if the deleteBefore attribute is also set to true.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="identicalColumns" type="xsd:boolean" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												Specifies whether the identical columns as in the source data source table should be used for the transfer. 
												If used no columnMap is needed. Default false.
												</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="identicalColumnsSource" type="DBContext" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												Specifies for the identical column transfer whether the source or the target is used as the basis for the column names that are to be regarded as identical. 
												The default is the target if nothing is specified.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="maxRecordDiff" type="xsd:float" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												Specifies the maximum negative deviation in percent that the source table may have from the target table. 
												A value of 0 is ignored. If no loss is permitted, 0.000001 can be specified. 
												With a value of 50, the job is canceled if the source table contains 50% fewer data records than the target table. 
												The default is 0.
												</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="sync" type="xsd:boolean" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												Specifies whether a real sync is performed or whether data is simply loaded with Insert - without checking.
												Default false
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="targetSyncWhere" type="xsd:string" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												Specifies a subset of the target table to be used for a sync (without WHERE)  in the syntax of the target provider. 
												Only makes sense if sync = "true".
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
									<xsd:attribute name="SyncByLastMod" type="xsd:boolean" use="optional" >
										<xsd:annotation>
											<xsd:documentation>
												Defines that a sync is processed by checking a lastMod date. This means on a technical side
												1. The LastMod date is determined in the target
												2. On the source data a where clause is added for LadtModCol > LastModTarget to determine the data to transfer
												3. Everything found on 2. in the source is deleted or updated, depending on sync mode in the target
												4. Insert for missing records
												Default false
											</xsd:documentation>
										</xsd:annotation>
									</xsd:attribute>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="name" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>
									Sets the name for the Transfervblock. This can be used in code or in the command line tool to get and start the processing. It also is contained in log files.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="conStringSourceType" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>The ADO / custom no-SQL driver name which should be used for the source data provider</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="conStringSource" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>The connection string for the source data provider</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="conStringTargetType" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>Der ADO / custom no-SQL driver which should be used as target data proivder</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="conStringTarget" type="xsd:string" use="required" >
							<xsd:annotation>
								<xsd:documentation>The connection string for the target data provider</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="targetMaxBatchSize" type="xsd:integer" use="optional" >
							<xsd:annotation>
								<xsd:documentation>
									Defines the max batch size for the fill operation in the targettable. 
									Maybe this should be set lower, if timeouts or max command length errors appear or the target data provider does not support batches (should be 1 then, i.e. Access).
									0 = maximum, everything else = count batch size, missing = Maximum, 1 = single statements
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="disableTransaction" type="xsd:boolean" use="optional" >
							<xsd:annotation>
								<xsd:documentation>
									Allows the disabling of the transactional processing, with the effect that errors during processing cannot be rolled back. 
									Sometimes this is needed, if the target data source does not supportes transactions (and its not implemented in code).
									Default false.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="transactionIsolationLevel" use="optional" >
							<xsd:annotation>
								<xsd:documentation>
									With this property the isolation level for the transaction can be set (as long it is not deactivated at all with disableTransaction).
									Default is Serializable
								</xsd:documentation>
							</xsd:annotation>
							<xsd:simpleType>
								<xsd:restriction base="xs:string">
									<xsd:enumeration value="ReadCommitted"/>
									<xsd:enumeration value="ReadUncommitted"/>
									<xsd:enumeration value="RepeatableRead"/>
									<xsd:enumeration value="Serializable"/>
									<xsd:enumeration value="Snapshot"/>
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

	<xsd:simpleType name="DBContext">
		<xsd:restriction base="xs:string">
			<xsd:enumeration value="Source"></xsd:enumeration>
			<xsd:enumeration value="Target"></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:complexType name="conditionType">
		<xsd:attribute name="checkOn" type="DBContext" use="optional" >
			<xsd:annotation>
				<xsd:documentation> Defines on which side, source or target, the condition should be checked</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="select" type="xsd:string" use="required" >
			<xsd:annotation>
				<xsd:documentation> The select which should be used to get the check data in the defined data provider </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="condition" type="xsd:string" use="required" >
			<xsd:annotation>
				<xsd:documentation>
					The condition to be checked in the format
					[[Select columnname]:[Expected value]]*  Multiple conditions can be seperated with ;
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="retryCount" type="xsd:int" use="optional" >
			<xsd:annotation>
				<xsd:documentation> Definition how often the condition can fail, before the block is aborting at all </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="retryDelay" type="xsd:int" use="optional" >
			<xsd:annotation>
				<xsd:documentation> Definition how many seconds to wait before starting a retry of the condition after a failed one </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>


	<xsd:complexType name="ColMapType">
		<xsd:attribute name="sourceCol" type="xsd:string" use="required" >
			<xsd:annotation>
				<xsd:documentation>The name of the column in the source data or an expression valid for the source data provider. </xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="targetCol" type="xsd:string" use="required" >
			<xsd:annotation>
				<xsd:documentation>The column name in the target table</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="isKey" type="xsd:boolean" use="optional" >
			<xsd:annotation>
				<xsd:documentation>Defines if this column is used as key column for synchronization</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="syncOptions">
		<xsd:attribute name="noUpdates" type="xsd:boolean" use="optional" >
			<xsd:annotation>
				<xsd:documentation>Defines if updates should not be used on snychonizations - default false</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="noDeletes" type="xsd:boolean" use="optional" >
			<xsd:annotation>
				<xsd:documentation>Defines if deletes should not be used on snychonizations - default false</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="noInserts" type="xsd:boolean" use="optional" >
			<xsd:annotation>
				<xsd:documentation>Defines if inserts should not be used on snychonizations - default false</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="syncByLastModOptions">
		<xsd:attribute name="SyncByLastModField" type="xsd:string" use="required" >
			<xsd:annotation>
				<xsd:documentation>
					Defines the date field name for the SyncByLastMod synchronization. This is mandatory and is the name of the column which contains the lastMod date.
					It is assumed that the lastMod column is identically named in the source and the target.
					Default empty
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="SyncByLastModMode" use="required">
			<xsd:annotation>
				<xsd:documentation>
						Defines how the lastMod sync is done. There are several options like append oder update_existing. The modes are described separately in the options
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xs:string">
					<xsd:enumeration value="APPEND">
						<xsd:annotation>
							<xsd:documentation>
								Just appends all records with greater lastMod date with INSERT. There are no checks on key, updates or deletions.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="APPEND_INCLUDE_MAXDATE">
						<xsd:annotation>
							<xsd:documentation>
								Just appends all records with greater-equal lastMod date with INSERT. There are no checks on key, updates or deletions.
								Records with same date for lastMod are deleted in the target before insert.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="UPDATE_EXISTING">
						<xsd:annotation>
							<xsd:documentation>
								Needs exact one primary key column. First determines the records in the source by the lastMod date filter and saves the keys of these.
								These keys are deleted in the target. Afterwards they are (re)inserted. 
								In this mode it is assumed that a record has exact one primary key column in only one occurence and is updateable.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="variable">
		<xsd:annotation>
			<xsd:documentation>
				(Re)declarizes / set a variable with the used definition
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name" use="required" type="xs:string">
			<xsd:annotation>
				<xsd:documentation>
					Name of the variable
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		
		<xsd:attribute name="type" use="required">
			<xsd:annotation>
				<xsd:documentation>
					Type of the variable
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xs:string">
					<xsd:enumeration value="Int64">
						<xsd:annotation>
							<xsd:documentation>
								A integer number
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="Double">
						<xsd:annotation>
							<xsd:documentation>
								A floating point number
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="DateTime">
						<xsd:annotation>
							<xsd:documentation>
								A date time  value
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="Boolean">
						<xsd:annotation>
							<xsd:documentation>
								A boolean value
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="String">
						<xsd:annotation>
							<xsd:documentation>
								A text value
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		
		<xsd:attribute name="value" use="optional" type="xs:string">
			<xsd:annotation>
				<xsd:documentation>
					A fixed value to set. Conversions to data types are done in a .NET standard way.
					Exclusive to selectStmt and expression attribute.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		
		<xsd:attribute name="selectStmt" use="optional" type="xs:string">
			<xsd:annotation>
				<xsd:documentation>
					Setting a value with the result of a select statement on source or target.
					As result the first column of the first record of the result is used.
					The attribute selectContext is mandatory.
					Exclusive to value and expression attribute.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		
		<xsd:attribute name="selectContext" use="optional">
			<xsd:annotation>
				<xsd:documentation>
					The execution context for the SQL statement
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xs:string">
					<xsd:enumeration value="Source">
						<xsd:annotation>
							<xsd:documentation>
								Execution of the SQL statement in the source data source
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="Target">
						<xsd:annotation>
							<xsd:documentation>
								Execution of the SQL statement in the target data source
							</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>

		<xsd:attribute name="expression" use="optional" type="xs:string">
			<xsd:annotation>
				<xsd:documentation>
					An expression which is evaluated in the DataTransfer DSL.
					Reference to other variables is possible with ${{VarName}}.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>

	</xsd:complexType>
	
</xs:schema>